{"version":3,"sources":["board.js","go.js","App.js","serviceWorker.js","index.js"],"names":["Board","size","this","current_color","BLACK","board","create_board","last_move_passed","in_atari","attempted_suicide","history","captures","numCaptured","EMPTY","WHITE","prototype","m","i","j","switch_player","pass","end_game","undo","length","lastState","pop","console","log","play","color","captured","neighbors","get_adjacent_intersections","atari","self","_","each","n","state","group","get_group","push","isEmpty","stone","newCaptured","cloneDeep","visited","visited_list","queue","count","func","liberties","stones","BoardIntersection","handleClick","_this","props","row","col","onPlay","style","top","left","classes","react_default","a","createElement","onClick","className","Component","BoardView","intersections","go_BoardIntersection","Object","assign","key","concat","width","height","id","AlertView","text","PassView","e","_this2","type","value","UndoButton","_this3","doUpdate","ContainerView","_this4","onBoardUpdate","setState","go_BoardView","bind","href","go_AlertView","go_PassView","go_UndoButton","App","go","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6727b0cf.chunk.js","sourcesContent":["import _ from \"lodash\";\r\n\r\nvar Board = function(size) {\r\n  this.current_color = Board.BLACK;\r\n  this.size = size;\r\n  this.board = this.create_board(size);\r\n  this.last_move_passed = false;\r\n  this.in_atari = false;\r\n  this.attempted_suicide = false;\r\n  this.history = [];\r\n  this.captures = [];\r\n};\r\n\r\nvar numCaptured = [];\r\n\r\nBoard.EMPTY = 0;\r\nBoard.BLACK = 1;\r\nBoard.WHITE = 2;\r\n\r\n/*\r\n * Returns a size x size matrix with all entries initialized to Board.EMPTY\r\n */\r\nBoard.prototype.create_board = function(size) {\r\n  var m = [];\r\n  for (var i = 0; i < size; i++) {\r\n    m[i] = [];\r\n    for (var j = 0; j < size; j++) m[i][j] = Board.EMPTY;\r\n  }\r\n  return m;\r\n};\r\n\r\n/*\r\n * Switches the current player\r\n */\r\nBoard.prototype.switch_player = function() {\r\n  this.current_color =\r\n    this.current_color === Board.BLACK ? Board.WHITE : Board.BLACK;\r\n};\r\n\r\n/*\r\n * At any point in the game, a player can pass and let his opponent play\r\n */\r\nBoard.prototype.pass = function() {\r\n  if (this.last_move_passed) this.end_game();\r\n  this.last_move_passed = true;\r\n  this.switch_player();\r\n};\r\n\r\n/*\r\n * At any point in the game, a player can undo and let his opponent play\r\n */\r\nBoard.prototype.undo = function() {\r\n if(this.history.length){\r\n  const lastState = this.history.pop();\r\n  this.board = lastState.board;\r\n  this.current_color = lastState.current_color;\r\n  console.log(\"board\", this);\r\n }\r\n  else{\r\n    console.log(\"no history\");\r\n  }\r\n};\r\n\r\n/*\r\n * Called when the game ends (both players passed)\r\n */\r\nBoard.prototype.end_game = function() {\r\n  console.log(\"GAME OVER\");\r\n};\r\n\r\n/*\r\n * Attempt to place a stone at (i,j). Returns true iff the move was legal\r\n */\r\nBoard.prototype.play = function(i, j) {\r\n  console.log(\"Played at \" + i + \", \" + j);\r\n  this.attempted_suicide = this.in_atari = false;\r\n\r\n  if (this.board[i][j] !== Board.EMPTY) return false;\r\n\r\n  var color = (this.board[i][j] = this.current_color);\r\n  var captured = [];\r\n  var neighbors = this.get_adjacent_intersections(i, j);\r\n  var atari = false;\r\n\r\n  var self = this;\r\n  _.each(neighbors, function(n) {\r\n    var state = self.board[n[0]][n[1]];\r\n    if (state !== Board.EMPTY && state !== color) {\r\n      var group = self.get_group(n[0], n[1]);\r\n      console.log(group);\r\n      if (group[\"liberties\"] === 0) captured.push(group);\r\n      else if (group[\"liberties\"] === 1) atari = true;\r\n    }\r\n  });\r\n\r\n  // detect suicide\r\n  if (_.isEmpty(captured) && this.get_group(i, j)[\"liberties\"] === 0) {\r\n    this.board[i][j] = Board.EMPTY;\r\n    this.attempted_suicide = true;\r\n    return false;\r\n  }\r\n\r\n  _.each(captured, function(group) {\r\n    _.each(group[\"stones\"], function(stone) {\r\n      self.board[stone[0]][stone[1]] = Board.EMPTY;\r\n      numCaptured++; \r\n    });\r\n  });\r\n  var newCaptured = numCaptured;\r\n  console.log(newCaptured);\r\n\r\n\r\n  if (atari) this.in_atari = true;\r\n\r\n  this.last_move_passed = false;\r\n  this.switch_player();\r\n  const state = {\r\n    current_color: this.current_color,\r\n    board: _.cloneDeep(self.board)\r\n  }\r\n  this.history.push(state);\r\n  console.log(\"history\", this.history);\r\n  return true;\r\n};\r\n\r\n/*\r\n * Given a board position, returns a list of [i,j] coordinates representing\r\n * orthagonally adjacent intersections\r\n */\r\nBoard.prototype.get_adjacent_intersections = function(i, j) {\r\n  var neighbors = [];\r\n  if (i > 0) neighbors.push([i - 1, j]);\r\n  if (j < this.size - 1) neighbors.push([i, j + 1]);\r\n  if (i < this.size - 1) neighbors.push([i + 1, j]);\r\n  if (j > 0) neighbors.push([i, j - 1]);\r\n  return neighbors;\r\n};\r\n\r\n/*\r\n * Performs a breadth-first search about an (i,j) position to find recursively\r\n * orthagonally adjacent stones of the same color (stones with which it shares\r\n * liberties). Returns null for if there is no stone at the specified position,\r\n * otherwise returns an object with two keys: \"liberties\", specifying the\r\n * number of liberties the group has, and \"stones\", the list of [i,j]\r\n * coordinates of the group's members.\r\n */\r\nBoard.prototype.get_group = function(i, j) {\r\n  var color = this.board[i][j];\r\n  if (color === Board.EMPTY) return null;\r\n\r\n  var visited = {}; // for O(1) lookups\r\n  var visited_list = []; // for returning\r\n  var queue = [[i, j]];\r\n  var count = 0;\r\n\r\n  let func = function(n) {\r\n    var state = self.board[n[0]][n[1]];\r\n    if (state === Board.EMPTY) count++;\r\n    if (state === color) queue.push([n[0], n[1]]);\r\n  };\r\n\r\n  while (queue.length > 0) {\r\n    var stone = queue.pop();\r\n    if (visited[stone]) continue;\r\n\r\n    var neighbors = this.get_adjacent_intersections(stone[0], stone[1]);\r\n    var self = this;\r\n\r\n    _.each(neighbors, func);\r\n\r\n    visited[stone] = true;\r\n    visited_list.push(stone);\r\n  }\r\n\r\n  return {\r\n    liberties: count,\r\n    stones: visited_list\r\n  };\r\n};\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\r\n\r\nimport Board from \"./board\";\r\n\r\nvar GRID_SIZE = 40;\r\n\r\nclass BoardIntersection extends Component {\r\n  handleClick = () => {\r\n    if (this.props.board.play(this.props.row, this.props.col))\r\n      this.props.onPlay();\r\n  };\r\n  render() {\r\n    var style = {\r\n      top: this.props.row * GRID_SIZE,\r\n      left: this.props.col * GRID_SIZE\r\n    };\r\n\r\n    var classes = \"intersection\";\r\n    if (this.props.color !== Board.EMPTY)\r\n      classes += this.props.color === Board.BLACK ? \" black\" : \" white\";\r\n\r\n    return <div onClick={this.handleClick} className={classes} style={style} />;\r\n  }\r\n}\r\n\r\nclass BoardView extends Component {\r\n  render() {\r\n    var intersections = [];\r\n    for (var i = 0; i < this.props.board.size; i++)\r\n      for (var j = 0; j < this.props.board.size; j++)\r\n        intersections.push(\r\n          <BoardIntersection\r\n            key={`${i}-${j}`}\r\n            {...{\r\n              board: this.props.board,\r\n              color: this.props.board.board[i][j],\r\n              row: i,\r\n              col: j,\r\n              onPlay: this.props.onPlay\r\n            }}\r\n          />\r\n        );\r\n    var style = {\r\n      width: this.props.board.size * GRID_SIZE,\r\n      height: this.props.board.size * GRID_SIZE\r\n    };\r\n    return (\r\n      <div style={style} id=\"board\">\r\n        {intersections}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass AlertView extends Component {\r\n  render() {\r\n    var text = \"\";\r\n    if (this.props.board.in_atari) text = \"ATARI\";\r\n    else if (this.props.board.attempted_suicide) text = \"INVALID MOVE\";\r\n\r\n    return <div id=\"alerts\">{text}</div>;\r\n  }\r\n}\r\n\r\nclass PassView extends Component {\r\n  handleClick = e => {\r\n    this.props.board.pass();\r\n  };\r\n  render() {\r\n    return (\r\n      <input\r\n        id=\"pass-btn\"\r\n        type=\"button\"\r\n        value=\"Pass\"\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass UndoButton extends Component {\r\n  handleClick = e => {\r\n    this.props.board.undo();\r\n    this.props.doUpdate();\r\n  };\r\n  render() {\r\n    return (\r\n      <input\r\n        id=\"undo-btn\"\r\n        type=\"button\"\r\n        value=\"Undo\"\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nclass ContainerView extends Component {\r\n  componentWillMount() {\r\n    this.setState({\r\n      board: this.props.board\r\n    });\r\n  }\r\n\r\n  onBoardUpdate() {\r\n    this.setState({ board: this.props.board });\r\n  }\r\n  \r\n  undo=()=>{\r\n    console.log('undo...')\r\n    this.state.board.undo();\r\n    this.onBoardUpdate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ContainerView\">\r\n        <div className=\"ContainerViewBoard\">\r\n          <BoardView\r\n            board={this.state.board}\r\n            onPlay={this.onBoardUpdate.bind(this)}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"ContainerViewSidebar\">\r\n          <a href=\"https://github.com/OR13/G0\">Source Code</a>\r\n          <AlertView board={this.state.board} />\r\n          <PassView board={this.state.board} /><br/><br/>\r\n\r\n          <button onClick={this.undo}>UNDOOOOO</button>\r\n          <UndoButton board={this.state.board} doUpdate={this.onBoardUpdate.bind(this)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContainerView;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport Board from \"./board\";\r\n\r\nimport ContainerView from \"./go\";\r\n\r\nvar board = new Board(19);\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n\r\n        <ContainerView board={board} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}